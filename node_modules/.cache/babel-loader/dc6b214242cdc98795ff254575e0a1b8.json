{"ast":null,"code":"var _jsxFileName = \"/home/quatre/Desktop/Projects/hangman/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Button from \"./components/Button\";\nimport GuessedLetters from \"./components/GuessedLetters\";\nimport Hangman from \"./components/Hangman\";\nimport Message from \"./components/Message\";\nimport Progression from \"./components/Progression\";\nimport Score from \"./components/Score\";\nimport UserInput from \"./components/UserInput\";\nimport Word from \"./components/Word\";\nimport \"./styles/App.css\";\nimport { getRandomWords } from \"./utils/reqOptions\";\nimport Perks from \"./components/Perks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [words, setWords] = useState(null);\n  const [currentWord, setCurrentWord] = useState(null);\n  const [currentLetter, setCurrentLetter] = useState(\"\");\n  const [hangmanCount, setHangmanCount] = useState(10);\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wordComplete, setWordComplete] = useState(false);\n  const [currentlyGuessing, setCurrentlyGuessing] = useState(true);\n  const [totalScore, setTotalScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    getWords();\n  }, []);\n  const [perks, setPerks] = useState({\n    hintPerk: false,\n    firstAndLastLetter: false,\n    skipWord: false\n  });\n  useEffect(() => {\n    if (hangmanCount === 0) {\n      setCurrentlyGuessing(false);\n      setGameOver(true);\n    }\n  }, [hangmanCount]);\n  useEffect(() => {\n    if (currentWord) {\n      const wordComplete = Object.values(currentWord.letters).every(letter => letter === true);\n\n      if (wordComplete) {\n        setCurrentlyGuessing(false);\n        setWordComplete(true);\n      }\n    }\n  }, [currentWord]);\n  useEffect(() => {\n    if (currentWord && !loading) {\n      const letterArray = Object.keys(currentWord.letters);\n      const letterIncluded = letterArray.includes(currentLetter);\n\n      if (letterIncluded) {\n        setCurrentWord(prevWordState => {\n          const newWordState = { ...prevWordState\n          };\n          newWordState.letters[currentLetter] = true;\n          return newWordState;\n        });\n      } else {\n        setHangmanCount(prevCount => {\n          return prevCount - 1;\n        });\n      }\n\n      setGuessedLetters(prevLetters => {\n        return [...prevLetters, currentLetter];\n      });\n    }\n  }, [currentLetter]);\n\n  const getWords = async () => {\n    const wordsArray = [];\n    const words = await getRandomWords();\n\n    for (const word of words) {\n      wordsArray.push(word.word);\n    }\n\n    console.log(wordsArray, \"******\");\n\n    if (words) {\n      setWords(wordsArray);\n      setLoading(false);\n    }\n  };\n\n  const resetPerksNewWord = () => {\n    setPerks(prevPerks => {\n      return { ...prevPerks,\n        hintPerk: false,\n        firstAndLastLetter: false\n      };\n    });\n  };\n\n  const resetPerksNewGame = () => {\n    setPerks({\n      skipWord: false,\n      hintPerk: false,\n      firstAndLastLetter: false\n    });\n  };\n\n  const scoreUp = points => {\n    setTotalScore(prevScore => prevScore + points);\n  };\n\n  const initGame = () => {\n    console.log(\"game initialised\");\n    getWords();\n\n    if (!loading) {\n      // setWords([...wordsArray]);\n      setCurrentWord(null);\n      setHangmanCount(10);\n      setGuessedLetters([]);\n      setGameOver(false);\n      setCurrentlyGuessing(true);\n      setTotalScore(0);\n      resetPerksNewGame(); // setWordComplete(false);}\n    }\n  };\n\n  const nextWord = () => {\n    scoreUp(hangmanCount);\n    setWords(prevWords => {\n      const newWords = [...prevWords];\n      newWords.shift();\n      return newWords;\n    });\n    setGameOver(false);\n    setWordComplete(false);\n    setCurrentlyGuessing(true);\n    setGuessedLetters([]);\n    setHangmanCount(10);\n    resetPerksNewWord();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: loading ? \"loading....\" : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left_side\",\n        children: /*#__PURE__*/_jsxDEV(GuessedLetters, {\n          guessedLetters: guessedLetters\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Word, {\n          currentWord: currentWord,\n          setCurrentWord: setCurrentWord,\n          words: words,\n          currentLetter: currentLetter,\n          loading: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Hangman, {\n          hangmanCount: hangmanCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"msg-btn\",\n          children: [/*#__PURE__*/_jsxDEV(Message, {\n            text: \"GAME OVER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            text: \"Play again?\",\n            func: initGame\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 15\n        }, this), wordComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"msg-btn\",\n          children: [/*#__PURE__*/_jsxDEV(Message, {\n            text: \"You guessed it!\",\n            positive: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            text: \"Continue...\",\n            func: nextWord\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }, this), perks.hintPerk && currentWord.definition !== null && /*#__PURE__*/_jsxDEV(Message, {\n          text: currentWord.definition,\n          hint: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n          guessedLetters: guessedLetters,\n          currentLetter: currentLetter,\n          setCurrentLetter: setCurrentLetter,\n          currentlyGuessing: currentlyGuessing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right_side\",\n        children: [/*#__PURE__*/_jsxDEV(Progression, {\n          words: words,\n          gameOver: gameOver\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Score, {\n          totalScore: totalScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Perks, {\n          setTotalScore: setTotalScore,\n          perks: perks,\n          setPerks: setPerks,\n          setCurrentWord: setCurrentWord,\n          currentWord: currentWord,\n          setHangmanCount: setHangmanCount,\n          currentlyGuessing: currentlyGuessing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"am745zNj9+IToGZLydDAW+czz4s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/quatre/Desktop/Projects/hangman/src/App.js"],"names":["useState","useEffect","axios","Button","GuessedLetters","Hangman","Message","Progression","Score","UserInput","Word","getRandomWords","Perks","App","words","setWords","currentWord","setCurrentWord","currentLetter","setCurrentLetter","hangmanCount","setHangmanCount","guessedLetters","setGuessedLetters","wordComplete","setWordComplete","currentlyGuessing","setCurrentlyGuessing","totalScore","setTotalScore","gameOver","setGameOver","loading","setLoading","getWords","perks","setPerks","hintPerk","firstAndLastLetter","skipWord","Object","values","letters","every","letter","letterArray","keys","letterIncluded","includes","prevWordState","newWordState","prevCount","prevLetters","wordsArray","word","push","console","log","resetPerksNewWord","prevPerks","resetPerksNewGame","scoreUp","points","prevScore","initGame","nextWord","prevWords","newWords","shift","definition"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport Button from \"./components/Button\";\nimport GuessedLetters from \"./components/GuessedLetters\";\nimport Hangman from \"./components/Hangman\";\nimport Message from \"./components/Message\";\nimport Progression from \"./components/Progression\";\nimport Score from \"./components/Score\";\nimport UserInput from \"./components/UserInput\";\nimport Word from \"./components/Word\";\nimport \"./styles/App.css\";\n\nimport { getRandomWords } from \"./utils/reqOptions\";\n\nimport Perks from \"./components/Perks\";\n\nfunction App() {\n  const [words, setWords] = useState(null);\n  const [currentWord, setCurrentWord] = useState(null);\n  const [currentLetter, setCurrentLetter] = useState(\"\");\n  const [hangmanCount, setHangmanCount] = useState(10);\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wordComplete, setWordComplete] = useState(false);\n  const [currentlyGuessing, setCurrentlyGuessing] = useState(true);\n  const [totalScore, setTotalScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    getWords();\n  }, []);\n\n  const [perks, setPerks] = useState({\n    hintPerk: false,\n    firstAndLastLetter: false,\n    skipWord: false,\n  });\n\n  useEffect(() => {\n    if (hangmanCount === 0) {\n      setCurrentlyGuessing(false);\n      setGameOver(true);\n    }\n  }, [hangmanCount]);\n\n  useEffect(() => {\n    if (currentWord) {\n      const wordComplete = Object.values(currentWord.letters).every(\n        (letter) => letter === true\n      );\n      if (wordComplete) {\n        setCurrentlyGuessing(false);\n        setWordComplete(true);\n      }\n    }\n  }, [currentWord]);\n\n  useEffect(() => {\n    if (currentWord && !loading) {\n      const letterArray = Object.keys(currentWord.letters);\n      const letterIncluded = letterArray.includes(currentLetter);\n      if (letterIncluded) {\n        setCurrentWord((prevWordState) => {\n          const newWordState = {\n            ...prevWordState,\n          };\n          newWordState.letters[currentLetter] = true;\n          return newWordState;\n        });\n      } else {\n        setHangmanCount((prevCount) => {\n          return prevCount - 1;\n        });\n      }\n\n      setGuessedLetters((prevLetters) => {\n        return [...prevLetters, currentLetter];\n      });\n    }\n  }, [currentLetter]);\n\n  const getWords = async () => {\n    const wordsArray = [];\n    const words = await getRandomWords();\n\n    for (const word of words) {\n      wordsArray.push(word.word);\n    }\n    console.log(wordsArray, \"******\");\n    if (words) {\n      setWords(wordsArray);\n      setLoading(false);\n    }\n  };\n\n  const resetPerksNewWord = () => {\n    setPerks((prevPerks) => {\n      return { ...prevPerks, hintPerk: false, firstAndLastLetter: false };\n    });\n  };\n  const resetPerksNewGame = () => {\n    setPerks({ skipWord: false, hintPerk: false, firstAndLastLetter: false });\n  };\n\n  const scoreUp = (points) => {\n    setTotalScore((prevScore) => prevScore + points);\n  };\n\n  const initGame = () => {\n    console.log(\"game initialised\");\n    getWords();\n    if (!loading) {\n      // setWords([...wordsArray]);\n      setCurrentWord(null);\n      setHangmanCount(10);\n      setGuessedLetters([]);\n      setGameOver(false);\n      setCurrentlyGuessing(true);\n      setTotalScore(0);\n      resetPerksNewGame();\n      // setWordComplete(false);}\n    }\n  };\n\n  const nextWord = () => {\n    scoreUp(hangmanCount);\n    setWords((prevWords) => {\n      const newWords = [...prevWords];\n      newWords.shift();\n      return newWords;\n    });\n    setGameOver(false);\n    setWordComplete(false);\n    setCurrentlyGuessing(true);\n    setGuessedLetters([]);\n    setHangmanCount(10);\n    resetPerksNewWord();\n  };\n\n  return (\n    <main>\n      {loading ? (\n        \"loading....\"\n      ) : (\n        <div className=\"container\">\n          <div className=\"left_side\">\n            <GuessedLetters guessedLetters={guessedLetters} />\n          </div>\n          <div className=\"center\">\n            <Word\n              currentWord={currentWord}\n              setCurrentWord={setCurrentWord}\n              words={words}\n              currentLetter={currentLetter}\n              loading={loading}\n            />\n            <Hangman hangmanCount={hangmanCount} />\n            {gameOver && (\n              <div className=\"msg-btn\">\n                <Message text=\"GAME OVER\" />\n                <Button text=\"Play again?\" func={initGame} />\n              </div>\n            )}\n            {wordComplete && (\n              <div className=\"msg-btn\">\n                <Message text=\"You guessed it!\" positive={true} />\n                <Button text=\"Continue...\" func={nextWord} />\n              </div>\n            )}\n            {perks.hintPerk && currentWord.definition !== null && (\n              <Message text={currentWord.definition} hint={true} />\n            )}\n            <UserInput\n              guessedLetters={guessedLetters}\n              currentLetter={currentLetter}\n              setCurrentLetter={setCurrentLetter}\n              currentlyGuessing={currentlyGuessing}\n            />\n          </div>\n          <div className=\"right_side\">\n            <Progression words={words} gameOver={gameOver} />\n            <Score totalScore={totalScore} />\n            <Perks\n              setTotalScore={setTotalScore}\n              perks={perks}\n              setPerks={setPerks}\n              setCurrentWord={setCurrentWord}\n              currentWord={currentWord}\n              setHangmanCount={setHangmanCount}\n              currentlyGuessing={currentlyGuessing}\n            />\n          </div>\n        </div>\n      )}\n    </main>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}